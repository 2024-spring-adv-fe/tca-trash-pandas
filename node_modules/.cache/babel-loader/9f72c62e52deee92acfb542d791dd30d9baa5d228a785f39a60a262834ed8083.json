{"ast":null,"code":"// Type Definitions\n// Exported Funcitons\nexport const getPreviousPlayers=results=>{const previousPlayers=results.flatMap(x=>x.players);return[...new Set(previousPlayers)].sort((a,b)=>a.localeCompare(b));};export const getLeaderboard=results=>{const players=getPreviousPlayers(results);return players.map(x=>getLeaderboardEntryForPlayer(results,x)).sort(// (a, b) => b.avg - a.avg\n// i-o-g\n(a,b)=>b.avg*1000+b.wins+b.losses-(a.avg*1000+a.wins+a.losses));};// internal functions\nconst getLeaderboardEntryForPlayer=(results,player)=>{const playerWins=results.filter(x=>x.winner===player).length;const playerGames=results.filter(x=>x.players.some(y=>y===player)).length;return{wins:playerWins,losses:playerGames-playerWins,avg:playerGames>0?playerWins/playerGames:0,name:player};};","map":{"version":3,"names":["getPreviousPlayers","results","previousPlayers","flatMap","x","players","Set","sort","a","b","localeCompare","getLeaderboard","map","getLeaderboardEntryForPlayer","avg","wins","losses","player","playerWins","filter","winner","length","playerGames","some","y","name"],"sources":["C:/Users/Melisa Soldner/OneDrive - Madison College/Documents/GitHub/2024-spring-adf-fe/tca-trash-pandas/src/GameResults.ts"],"sourcesContent":["// Type Definitions\r\n\r\nexport type GameResult = {\r\n    winner: string;\r\n    players: string[];\r\n};\r\n\r\nexport type LeaderboardEntry = {\r\n    wins: number;\r\n    losses: number;\r\n    avg: number;\r\n    name: string;\r\n};\r\n\r\n// Exported Funcitons\r\n\r\nexport const getPreviousPlayers = (results: GameResult[]) => {\r\n\r\n    const previousPlayers = results.flatMap(\r\n        x => x.players\r\n    );\r\n\r\n    return [\r\n        ...new Set(previousPlayers)\r\n    ].sort(\r\n        (a, b) => a.localeCompare(b)\r\n    );\r\n\r\n};\r\n\r\n\r\nexport const getLeaderboard = (results: GameResult[]): LeaderboardEntry[] => {\r\n\r\n    const players = getPreviousPlayers(results);\r\n\r\n    return players.map(\r\n        x => getLeaderboardEntryForPlayer(results, x)\r\n    ).sort(\r\n        // (a, b) => b.avg - a.avg\r\n\r\n        // i-o-g\r\n        (a, b) => (b.avg * 1000 + b.wins + b.losses) - (a.avg * 1000 + a.wins + a.losses)\r\n    );\r\n};\r\n\r\n// internal functions\r\n\r\nconst getLeaderboardEntryForPlayer = (results: GameResult[], player: string): LeaderboardEntry => {\r\n\r\n    const playerWins = results.filter(x => x.winner === player).length;\r\n    const playerGames = results.filter(\r\n        x => x.players.some(\r\n            y => y === player\r\n        )\r\n    ).length;\r\n\r\n    return {\r\n        wins: playerWins\r\n        , losses: playerGames - playerWins\r\n\r\n        , avg: playerGames > 0\r\n            ? playerWins / playerGames\r\n            : 0\r\n\r\n        , name: player\r\n    };\r\n};"],"mappings":"AAAA;AAcA;AAEA,MAAO,MAAM,CAAAA,kBAAkB,CAAIC,OAAqB,EAAK,CAEzD,KAAM,CAAAC,eAAe,CAAGD,OAAO,CAACE,OAAO,CACnCC,CAAC,EAAIA,CAAC,CAACC,OACX,CAAC,CAED,MAAO,CACH,GAAG,GAAI,CAAAC,GAAG,CAACJ,eAAe,CAAC,CAC9B,CAACK,IAAI,CACF,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,CAC/B,CAAC,CAEL,CAAC,CAGD,MAAO,MAAM,CAAAE,cAAc,CAAIV,OAAqB,EAAyB,CAEzE,KAAM,CAAAI,OAAO,CAAGL,kBAAkB,CAACC,OAAO,CAAC,CAE3C,MAAO,CAAAI,OAAO,CAACO,GAAG,CACdR,CAAC,EAAIS,4BAA4B,CAACZ,OAAO,CAAEG,CAAC,CAChD,CAAC,CAACG,IAAI,CACF;AAEA;AACA,CAACC,CAAC,CAAEC,CAAC,GAAMA,CAAC,CAACK,GAAG,CAAG,IAAI,CAAGL,CAAC,CAACM,IAAI,CAAGN,CAAC,CAACO,MAAM,EAAKR,CAAC,CAACM,GAAG,CAAG,IAAI,CAAGN,CAAC,CAACO,IAAI,CAAGP,CAAC,CAACQ,MAAM,CACpF,CAAC,CACL,CAAC,CAED;AAEA,KAAM,CAAAH,4BAA4B,CAAGA,CAACZ,OAAqB,CAAEgB,MAAc,GAAuB,CAE9F,KAAM,CAAAC,UAAU,CAAGjB,OAAO,CAACkB,MAAM,CAACf,CAAC,EAAIA,CAAC,CAACgB,MAAM,GAAKH,MAAM,CAAC,CAACI,MAAM,CAClE,KAAM,CAAAC,WAAW,CAAGrB,OAAO,CAACkB,MAAM,CAC9Bf,CAAC,EAAIA,CAAC,CAACC,OAAO,CAACkB,IAAI,CACfC,CAAC,EAAIA,CAAC,GAAKP,MACf,CACJ,CAAC,CAACI,MAAM,CAER,MAAO,CACHN,IAAI,CAAEG,UAAU,CACdF,MAAM,CAAEM,WAAW,CAAGJ,UAAU,CAEhCJ,GAAG,CAAEQ,WAAW,CAAG,CAAC,CAChBJ,UAAU,CAAGI,WAAW,CACxB,CAAC,CAELG,IAAI,CAAER,MACZ,CAAC,CACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}