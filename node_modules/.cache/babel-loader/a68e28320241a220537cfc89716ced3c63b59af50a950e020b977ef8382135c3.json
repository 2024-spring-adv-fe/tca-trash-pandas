{"ast":null,"code":"import { durationFormatter } from 'human-readable';\nconst fomatterDefault = durationFormatter();\nconst formatterYMD = durationFormatter({\n  allowMultiples: ['y', 'mo', 'd']\n});\n\n// Type Definitions\n\n// Exported Funcitons\n\nexport const getPreviousPlayers = results => {\n  const previousPlayers = results.flatMap(x => x.players);\n  return [...new Set(previousPlayers)].sort((a, b) => a.localeCompare(b));\n};\nexport const getLeaderboard = results => {\n  const players = getPreviousPlayers(results);\n  return players.map(x => getLeaderboardEntryForPlayer(results, x)).sort(\n  // (a, b) => b.avg - a.avg\n\n  // i-o-g\n  (a, b) => b.avg * 1000 + b.wins + b.losses - (a.avg * 1000 + a.wins + a.losses));\n};\nexport const getGeneralFacts = results => {\n  const now = Date.now();\n  const gameEndDatesInMilliseconds = results.map(x => Date.parse(x.end));\n  const gameDurationsInMilliseconds = results.map(x => Date.parse(x.end) - Date.parse(x.start));\n  return {\n    totalGames: results.length,\n    lastPlayed: formatterYMD(now - Math.max(...gameEndDatesInMilliseconds)),\n    shortestGame: fomatterDefault(Math.min(...gameDurationsInMilliseconds)),\n    longestGame: (Math.max(...gameDurationsInMilliseconds) / 1000 / 60).toFixed(2)\n  };\n};\n\n// internal functions\n\nconst getLeaderboardEntryForPlayer = (results, player) => {\n  const playerWins = results.filter(x => x.winner === player).length;\n  const playerGames = results.filter(x => x.players.some(y => y === player)).length;\n  return {\n    wins: playerWins,\n    losses: playerGames - playerWins,\n    avg: playerGames > 0 ? playerWins / playerGames : 0,\n    name: player\n  };\n};","map":{"version":3,"names":["durationFormatter","fomatterDefault","formatterYMD","allowMultiples","getPreviousPlayers","results","previousPlayers","flatMap","x","players","Set","sort","a","b","localeCompare","getLeaderboard","map","getLeaderboardEntryForPlayer","avg","wins","losses","getGeneralFacts","now","Date","gameEndDatesInMilliseconds","parse","end","gameDurationsInMilliseconds","start","totalGames","length","lastPlayed","Math","max","shortestGame","min","longestGame","toFixed","player","playerWins","filter","winner","playerGames","some","y","name"],"sources":["C:/Users/Melisa Soldner/OneDrive - Madison College/Documents/GitHub/2024-spring-adf-fe/tca-trash-pandas/src/GameResults.ts"],"sourcesContent":["import { durationFormatter } from 'human-readable';\r\n\r\nconst fomatterDefault = durationFormatter();\r\nconst formatterYMD = durationFormatter({\r\n    allowMultiples: ['y', 'mo', 'd']\r\n})\r\n\r\n\r\n// Type Definitions\r\n\r\nexport type GameResult = {\r\n    winner: string;\r\n    players: string[];\r\n    start: string;\r\n    end: string;\r\n};\r\n\r\nexport type LeaderboardEntry = {\r\n    wins: number;\r\n    losses: number;\r\n    avg: number;\r\n    name: string;\r\n};\r\n\r\nexport type GeneralFacts = {\r\n    totalGames: number;\r\n    lastPlayed: string;\r\n    shortestGame: string;\r\n    longestGame: string;\r\n};\r\n\r\n// Exported Funcitons\r\n\r\nexport const getPreviousPlayers = (results: GameResult[]) => {\r\n\r\n    const previousPlayers = results.flatMap(\r\n        x => x.players\r\n    );\r\n\r\n    return [\r\n        ...new Set(previousPlayers)\r\n    ].sort(\r\n        (a, b) => a.localeCompare(b)\r\n    );\r\n\r\n};\r\n\r\n\r\nexport const getLeaderboard = (results: GameResult[]): LeaderboardEntry[] => {\r\n\r\n    const players = getPreviousPlayers(results);\r\n\r\n    return players.map(\r\n        x => getLeaderboardEntryForPlayer(results, x)\r\n    ).sort(\r\n        // (a, b) => b.avg - a.avg\r\n\r\n        // i-o-g\r\n        (a, b) => (b.avg * 1000 + b.wins + b.losses) - (a.avg * 1000 + a.wins + a.losses)\r\n    );\r\n};\r\n\r\nexport const getGeneralFacts = (results: GameResult[]): GeneralFacts => {\r\n    const now = Date.now();\r\n    const gameEndDatesInMilliseconds = results.map(\r\n        x => Date.parse(x.end)\r\n    );\r\n\r\n    const gameDurationsInMilliseconds = results.map(\r\n        x => Date.parse(x.end) - Date.parse(x.start)\r\n    );\r\n    return {\r\n        totalGames: results.length\r\n        , lastPlayed:\r\n            formatterYMD(\r\n                (\r\n                    now - Math.max(...gameEndDatesInMilliseconds)\r\n                )\r\n            ) as string\r\n        , shortestGame:\r\n            fomatterDefault(\r\n                Math.min(...gameDurationsInMilliseconds)\r\n            ) as string\r\n        , longestGame: (\r\n            Math.max(...gameDurationsInMilliseconds)\r\n            / 1000 / 60\r\n        ).toFixed(2)\r\n    };\r\n};\r\n\r\n// internal functions\r\n\r\nconst getLeaderboardEntryForPlayer = (results: GameResult[], player: string): LeaderboardEntry => {\r\n\r\n    const playerWins = results.filter(x => x.winner === player).length;\r\n    const playerGames = results.filter(\r\n        x => x.players.some(\r\n            y => y === player\r\n        )\r\n    ).length;\r\n\r\n    return {\r\n        wins: playerWins\r\n        , losses: playerGames - playerWins\r\n\r\n        , avg: playerGames > 0\r\n            ? playerWins / playerGames\r\n            : 0\r\n\r\n        , name: player\r\n    };\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}